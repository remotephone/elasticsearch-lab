---
- hosts: elk
  remote_user: elasticsearch
  become: yes
  vars_files:
    - vars/main.yml
  tasks:
  - name: ensure dependencies since we're in an lxc container
    apt:
      pkg: 
      - apt-transport-https
      - ca-certificates
      - gnupg
      - curl
      - python3
      - python3-pip
      state: present
      update_cache: yes
  - name: add elastic gpg key
    apt_key:
      id: 46095ACC8548582C1A2699A9D27D666CD88E42B4
      url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
      state: present
  - name: add elasticsearch repository
    apt_repository:
      repo: deb https://artifacts.elastic.co/packages/7.x/apt stable main
      state: present
  - name: ensure dependencies and install elk
    apt:
      pkg: 
      - apt-transport-https
      - openjdk-8-jre
      - elasticsearch
      - logstash
      - kibana
      state: present
      update_cache: yes

  - name: install pexpect
    pip:
      name: pexpect

  - name: setup elasticsearch configs
    template:
      src: files/elasticsearch/elasticsearch.yml.j2
      dest: /etc/elasticsearch/elasticsearch.yml
      owner: root
      group: root
      mode: 0644
  - name: Clean existing certificates
    file:
      path: /etc/elasticsearch/elastic-certificates.p12
      state: absent
  - name: generate elasticsearch certificates
    shell: '/usr/share/elasticsearch/bin/elasticsearch-certutil cert -out /etc/elasticsearch/elastic-certificates.p12 -pass ""'
  - name: fix cert permissions for elasticsearch
    file:
      path: /etc/elasticsearch/elastic-certificates.p12
      group: elasticsearch
      mode: '0644'
  - name: enable elasticsearch and start it
    service:
      name: elasticsearch
      enabled: yes
      state: started

  - name: set passwords interactively 
    expect:
      echo: yes
      command: /usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive -b
      responses:
        (.*)elastic(.*): "{{elastic_password}}"
        (.*)apm_system(.*): "{{apm_system_password}}"
        (.*)kibana_system(.*): "{{kibana_system_password}}"
        (.*)logstash_system(.*): "{{logstash_system_password}}"
        (.*)beats_system(.*): "{{beats_system_password}}"
        (.*)remote_monitoring_user(.*): "{{remote_monitoring_user_password}}"

 
  - name: Update logstash_internal password
    uri:
      url: "{{elasticsearch_url}}/_security/user/logstash_internal"
      method: POST
      body_format: json
      body: "{ \"password\": \"{{logstash_internal_password}}\", \"roles\": [ \"logstash_writer\" ], \"full_name\": \"Internal Logstash User\" }"
      status_code: 200
      user: "{{es_api_basic_auth_username}}"
      password: "{{es_api_basic_auth_password}}"
      force_basic_auth: yes
 
  - name: Update logstash_internal password
    uri:
      url: "{{elasticsearch_url}}/_xpack/security/role/logstash_writer"
      method: POST
      body_format: json
      body: "{ \"cluster\": [\"manage_index_templates\", \"monitor\", \"manage_ilm\"], \"indices\": [ { \"names\": [ \"logstash-*\" ], \"privileges\": [\"write\",\"create\",\"delete\",\"create_index\",\"manage\",\"manage_ilm\"] } ]}"
      status_code: 200
      user: "{{es_api_basic_auth_username}}"
      password: "{{es_api_basic_auth_password}}"
      force_basic_auth: yes

  - name: restart elasticsearch
    service:
      name: elasticsearch
      state: started
  - name: setup kibana config
    template:
      src: files/kibana/kibana.yml.j2
      dest: /etc/kibana/kibana.yml
      owner: root
      group: root
      mode: 0644
  - name: enable kibana and start it
    service:
      name: kibana
      enabled: yes
      state: restarted
  - name: setup logstash beats configs
    template:
      src: files/logstash/01_beats.conf.j2
      dest: /etc/logstash/conf.d/01_beats.conf
      owner: root
      group: root
      mode: 0644
  - name: enable logstash and start it
    service:
      name: logstash
      enabled: yes
      state: restarted
